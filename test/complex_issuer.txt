Open Tasks:
* check UsagePolicy handling in DECTS (how is UP stored for User?)
  -> hard coded UP at /api/meta/usage
* create sample UsagePolicies
  * issuer: very restrictive
  * user: moderate
  * verifier: too far-reaching
* create list of fields to be shared with Issuer / Verifier

DID for scanning by user
- DID: did:oyd:zQmUtyoGLViWEiR74HVPADxybMEAVuXkeob6yzwyhoXKAm9
- DID Document:
  {"usagePolicy":"https://idunion-issuer.data-container.net/api/meta/usage","info": "https://idunion-issuer.data-container.net/api/vaccination_info","connect": "https://idunion-issuer.data-container.net/api/vaccination_apply"}

Extend sc-idunion for complex flow
* implement using new UsagePolicies
  * /api/meta/usage returns SOYA UsagePolicy + without authorization
* implement GET /api/vaccination_info
  * read from ConfigurationItem with key "vaccination_info"
o implement POST /api/vaccination_apply
  o create record with schemaDRI IDuVacCert_Application

SOyA Form generated by DataVault GET /api/read_qr/:did
- SOyA: IDunionIssuerInfo (zQmR599yioNLHmVDS6vWc1MrpbksLajLKGvnovHeuu5fD59)
* resolve OYDID
  -> https://oydid-resolver.data-container.net/1.0/identifiers/did:oyd:zQmP9bhtpd6CGC52hbYNsYtAoGrHaUhx2dM4WKdt8Y4raaC
* implement/perform DPV-service matching
* generate record in repo oyd_connect & store
  o Did <- provided from request
  o DidDocument <- resolved DID
  o UsagePolicyExternal <- response from DidDoc:usagePolicy
  o UsagePolicy <- check how this was done in DECTS
  o UsagePolicyMatch <- result of matching Usage Policies using Fajar's DPV-service
  o externalTitle <- response from DidDoc:info/title
  o externalDescription <- response from DidDoc: info/description
  o externalContact <- response from DidDoc: info/email
  o externalDataRequest <- response from DidDoc: info/dataRequest (Array of strings - matched against local personal data record)
  o externalSeviceEndpoint <- DidDoc: connect
  o status: "created"
* build JSON for response
  - id: record in repo oyd_connect
  - content: attributes from IDunionIssuerInfo with oyd_connect content
  - schema_dri: IDunionIssuerInfo

Data Vault endpoint /api/connect/:id
o update record :id
  o status: "{value from action}" / if "cancel": end here
  o build JSON with attributes from externalDataRequest
  * POST to externalServiceEndpoint with JSON in body
    o 200: update status "submitted + TS"
    o otherwise: status "submitted with Error 5xx + TS"

---
List of attributes to share from Data Vault

name
dateOfBirth
uniqueIdentifier
sex
userEmail
endpoint: "https://data-vault.eu/api/connect/"
token: generated